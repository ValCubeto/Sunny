
fun main() {
  println("Hello, world!")
}

/*
global = {
  std: Namespace
  println: $(impl Display) -> USize
  Int*, Float*, USize, ISize: NumericType
  Bool: enum { True, False }
  Ordering: enum { Less, Equal, Great }
  Result: enum { Ok, Err }
  Option: enum { Some, None }
  Array: priv Struct { ptr: USize, len: USize, cap?: USize }
  String: priv Struct { arr: Array }
  Function: priv Struct { name: String }
}
*/

/*
struct Function {
  name: Rc<str>,
  params: Box<[ ... ]>,
}
struct Variable {
  typing: Type,
  value: Value
}
enum Item {
  Function(Function)
  // ...
}
struct File(HashMap<Box<str>, Item>);

// ignore spaces, newlines, and comments
fn next_token() {}

// ignore spaces (not newlines) and comments
fn skip_spaces() {}

fn eof() -> bool {
  next_char().is_none()
}

fn parse_keyword() -> String {
}

fn parse_file() -> File {
  let file: File = File::new();
  loop {
    next_token();
    if eof() {
      return file;
    }
    let word = parse_keyword();
    next_token();
    match word.as_str() {
      "fun" => {
        let function = parse_function();
        file.set(function.name, Item::Function(function));
      }
      // ...
      other => syntax_err!("unknown or unexpected keyword: {other}")
    };
  }
}

fn parse_function() -> Function {
  let name = parse_word();
  next_token();
  let params = parse_params();
}

fn parse_params() -> Vec<...> {
}


*/
