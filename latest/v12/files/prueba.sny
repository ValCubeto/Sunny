/*
enum ImportPath {
  Single(String),
  Multiple(List<ImportPath>),
  File(String),
}

enum Type {
  Nothing,
  Infer,
  Ref(String),
  // PassGenerics()
}

enum ParamName {
  Index(usize),
  Name(String)
}

enum Expr {
  Ref(String),
  GetItem {
    value: Expr,
    name: Expr,
  },
  Call {
    value: Expr,
    generics: Map<ParamName, Type>,
    args: Map<ParamName, Expr>
  }
}

enum Item {
  Import {
    path: ImportPath,
    items: ImportPath
  }
  Const {
    type_of: Type,
    value: Expr
  }
}
*/


/*
Item::Import {
  path: ImportPath::Single("std"),
  name: ImportPath::Single("env"),
}
*/
use std::env
/*
Item::Import {
  path: ImportPath::Single("discord"),
  name: ImportPath::Multiple([
    ImportPath::Single("Client"),
    ImportPath::Single("Intents"),
  ])
}
*/
use discord::{ Client, Intents }

/*
Item::Const {
  type_of: Type::Infer,
  value: Expr::Call {
    value: Expr::GetItem {
      value: Expr::Ref("env"),
      name: Expr::Ref("get_var"),
    },
    generics: {},
    args: {
      ParamName::Index(0) => Expr::String("TOKEN")
    }
  }
}
*/
const TOKEN = env::get_var("TOKEN")

/*
Item::Function {
  name: "main",
  generics: {},
  params: {},
  output: Type::Nothing,
  body: [...]
}
*/
fun main() {
  /*
  Expr::Let {
    type_of: Type::Infer,
    value: Expr::GetItem {
      name: Expr::BinOr(
        &Expr::Ref("GUILDS"),
        &Expr::Ref("MESSAGE_CONTENT")
      ),
      value: Type::Ref("Intents"),
    }
  */
  let permissions = Intents::{ GUILDS | MESSAGE_CONTENT }

  /*
  Expr::Var {
    type_of: Type::Infer,
    value: Expr::Call {
      value: Expr::GetItem {
        name: Expr::Ref("new"),
        value: Type::Ref("Client")
      },
      generics: {},
      args: {
        ParamName::Index(0) => Expr::Ref("permissions")
      }
    }
  */
  var client = Client::new(permissions)

  /*
  Expr::Call {
    value: Expr::GetItem {
      name: Expr::Ref("on"),
      value: Type::Ref("client")
    },
    generics: {},
    args: {
      ParamName::Index(0) => Expr::String("ready"),
      ParamName::Index(1) => Expr::Function {
        name: "",
        generics: {},
        params: {},
        body: [...]
      }
    }
  }
  */
  client.on("ready", () => {
    /*
    Expr::Call {
      value: Expr::Ref("println"),
      generics: {},
      args: {
        ParamName::Index(0) => Expr::FmtString([
          Expr::String("Logged in as "),
          Expr::GetItem {
            name: Expr::Ref("username"),
            value: Expr::GetProp {
              name: "username",
              value: Expr::Ref("client")
            }
          }
          Expr::String("!")
        ])
      }
    }
    */
    println("Logged in as {client.user.username}!")
  })

  /*
  Expr::Call {
    value: Expr::GetItem {
      name: Expr::Ref("on"),
      value: Type::Ref("client")
    },
    generics: {},
    args: {
      ParamName::Index(0) => Expr::String("message_receive"),
      ParamName::Index(1) => Expr::Function {
        name: "",
        generics: {},
        params: {
          ParamName::Index(0) => Param {
            name: "msg",
            type_of: Type::Infer
          }
        },
        body: [...]
      }
    }
  } 
  */
  client.on("message_receive", (msg) => {

    if msg.content == "!ping" {

      msg.reply("Pong!")

    }

  })

  client.login(TOKEN)
}

