
test "Comments" {
  // single line comment
  /*
   * multiline comment
   */
}

test "Numbers" {
  123
  3.1415
  -456
  -0.001
  1e4
  5E-4
  -4e+5
  5.5e5.5
}

test "Strings" {
  'c'
  "Normal string"
  r"Raw string\n"
  f"Formatted string {r"with a nested raw string"}"
  c"C string"
}

test "Booleans" {
  True
  False
  True == False
  True != False
  True && False
  False || True
  False === False
  False !== False
  1 > 2
  1 < 2
  1 >= 2
  1 <= 2
}

test "Operators" {
  1 + 2
  1 - 2

  1 * 2
  1 / 2
  1 % 2

  1 ** 2

  1 & 2
  1 | 2
  1 ^ 2

  assert!(2 + 3 ** 4 * 2 == 164)
  -(1 + 2)
}

test "Collections" {
  [1, 2, 3] // Array
  {"1" => "one", "2" => "two"} // Map
  {x: 1, y: 2} // Map
}

test "Variables" {
  // no type needed for primitives
  const GREETING = "Hello, world!"
  // there are lot of number types,
  // so we need to specify the type of this one
  const PI: Float32 = 3.1415

  let inmutable = "I'm immutable"
  var mutable = "I'm mutable"
  mutable = "I changed"
  assert!(mutable == "I changed")
  match try { inmutable = "I won't change" } {
    Ok(_) => panic("Shouldn't be able to change this value...")
    Err(what) => println!("Error: {}", what)
  }
}

test "Structs" {
  struct Point {
    x: Int32
    y: Int32
  }
  let point = Point { x: 1, y: 2 }
  assert!(point.x == 1)
}

test "Enums" {
  enum Direction {
    North
    South
    East
    West
  }
  let direction = Direction::North
  // exactly the same because 'direction' is a constant
  assert!(direction === Direction::North)

  enum StructFields {
    Single
    WrapTuple(Int32, Int32)
    WrapObject { x: Int32, y: Int32 }
  }
}

test "Bit sets" {
  bitset DiscordIntents {
    // Default value
    Guilds = True
    GuildMessages = 0
    // By default, all other bits are set to zero
    MessageContent
    // ...
  }
  // No need to include 'Guilds' here, because it's already set to true
  let intents = DiscordIntents { GuildMessages | MessageContent }
}

test "Functions" {
  fun add(a: Int32, b: Int32) -> Int32 {
    a + b
  }
  debug!(add(1, 2))

  let div = (a: Float32, b: Float32) -> a / b
  debug!(div(1, 2))

  fun where_is_it<T>(_: T) -> String {
    path_to_type!(T)
  }
  assert!(where_is_it("help") == $"syntax::{"Functions"}::type_name::T"$)

  #(allow(idk))
  fun three_decimals<N: PrecisionFormat>(n: N) -> String {
    f"{n#.3}"
  }
  assert!(three_decimals(1.23456789) == "1.234")
  assert!(three_decimals(-100) == "-100.000")
}

test "Classes" {
  class Point {
    struct {
      x: Int32
      y: Int32
    }
    fun new(x: Int32, y: Int32) -> Self {
      Self { x, y }
    }
    fun move(dx: Int32, dy: Int32) -> Self {
      self.x += dx
      self.y += dy
      self
    }
    fun moved(dx: Int32, dy: Int32) -> Self {
      Self { x: self.x + dx, y: self.y + dy }
    }
  }
  var point = Point::new(10, 2)
  assert!(point.x == 10)
  point.move(15, 20)
  assert!(point.x == 15)
  let moved = point.moved(4, 10)
  assert!(moved.x == 4 && point.x == 20)
}

test "Java" {
  class Program {
    pub static fun main(args: String[]) -> Nothing {
      std::io::println("Hello, world!");
    }
  }
  Program::main(std::env::args().collect());
}

test "C++" {
  fun main(argc: Index, argv: &Char) -> Int32 {
    std::io::stdout().writeln("Hello, world!");
    return 0;
  }
}

test "Type aliases" {
  typedef Dictionary<V> = BinTreeMap<String, V>
  // Can be used as a type and as a value
  struct Nothing = ()
}

test "Ternaries" {
  const EOL = if std::os::OS_NAME == "windows" { "\r\n" } else { "\n" }
}

#[should_fail]
test "Keywords" {
  static pub priv
  fun return yield where async await
  defer
  try
  with
  if else
  match
  trait impl
  loop while for in break continue
  test
  struct
  enum
  bitset
  class extends
  const let var
  macro
  typedef
  std
  self Self
  super Super
  use from as
}

test "Number" {
  trait Add<T = Self, O = Self> {
    fun add(&self, other: &T) -> O
  }

  trait Natural: Add & Sub & Mul & Div & ... {}
  trait Integer: Natural {}
  trait Decimal: Integer {}
  trait Number: Integer | Decimal {}
  trait Math: Number {
    fun sqrt(&self) -> Self?
    fun log10(&self) -> Self?
    fun log2(&self) -> Self?
  }

  use Math
  let n = 10f32.sqrt()


  impl Integer
  for
    Int8, Int16, Int32, Int64, Int128,
    UInt8, UInt16, UInt32, UInt64, UInt128,
    BigInt, BigUint
  {}

  impl Decimal
  for
    Float32, Float64, Float128,
    // UFloat32, UFloat64, UFloat128
    BigDecimal
  {}

  impl Add for Float32 {
    fun add(&self, other: &Int32) -> Float32 {
      self + other.into()
    }
  }
  impl Add for Int32 {
    fun add(&self, other: &Float32) -> Int32 {
      self + other.floor().into()
    }
  }
}
