// Inline comment
/* Block comment */

/*
Constant {
  ty: Type::Ident(Type {
    path: Expr::Value(Value::String("Int8")),
    generics: HashMap::new()
  }),
  val: Expr::Expr(
    Op::Equal,
    Expr::Value(IntermediateValue::Number(Number::Int(6))),
    Expr::Expr(
      Op::Mul,
      Expr::Value(IntermediateValue::Number(Number::Int(2))),
      Expr::Expr(
        Op::Try,
        Expr::Expr(
          Op::Call,
          Expr::Value(IntermediateValue::Ident("Some")),
          Expr::Value(IntermediateValue::Map(hashmap! {
            "0" => Value::Ident("3")
          })),
        ) // Expr(Call)
        Expr::Value(IntermediateValue::Number(Number::Int(3)))
        null
      ) // Expr(Try)
    ) // Expr(Mul)
  ) // Expr(Equal)
} // Constant
*/
/*
enum Expr {
  Value(Value),
  Arith(Op, Box<Expr>, Box<Expr>),
  Unary(Op, Box<Expr>),
  Call {
    path: Path,
    generics: Map<String, Expr>,
    args: Vec<Expr>,
  }
  If(Box<Expr>, Box<Expr>, Box<Expr>),
}

/// Returns Expr::Unary too
fn parse_value(parser: &mut Parser) -> Expr {
  parser.next();
  // match parser.current() { ... }
  // ...
}

fn parse_expr(parser: &mut Parser, left: Expr, prev_op: Op) -> Expr {
  let val: Expr = parse_value(parser);
  let op = parse_op()?;
  let right = if op.precedence() < prev_op.precedence() {
    parse_expr(val, op)
  } else {
    val
  };
  Expr::Arith(op, Box::new(left), Box::new(right))
}
parse_expr(Expr::Value("6"), Op::Equal);
*/
// const TEST: UInt8 =
6? == 2 * 3;

/*
fn parse_const(parser) -> ? {
  // ...
  // after '='
  parser.next_token();
  let value = parse_value(parser);
  match parse_expr(parser, value) {}
  let op = parse_op()
}

/// parses unary operators and prior ops too, so `&a.b?` is parsed here
fn parse_value(parser) -> Expr {
  parser.next_token();
  match parser.current() {
    '&' => Expr::Unary(Op::Ref, Box::new(parse_value(parser))),
    '!' => Expr::Unary(Op::Not, Box::new(parse_value(parser))),
    d if d.is_ascii_digit() => Expr::Value(Value::Number(parse_number(parser))),
    ...
    _ => syntax_error(...),
  }
}

fn parse_expr(parser, left: Expr) -> Option<Expr> {
  let op = match parser.current() {
    '+' => Op::Add,
    '-' => Op::Sub,
    '*' => Op::Mul,
    '/' => Op::Div,
    ...
    _ => return None,
  };
  parser.next_token();
}
*/

// fun main() {
//   println("Hello, world!")
// }
